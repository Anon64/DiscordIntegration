buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

repositories {
    ivy {
        name "CurseForge"
        artifactPattern 'http://addons-origin.cursecdn.com/files/[organisation]/[module]-[revision].[ext]'
    }
    jcenter()
    flatDir {
        dirs "libs"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

def mcVersion = '1.10.2'
def forgeVersion = '12.18.3.2185'
def modVersion = '3.0.0-alpha'

version = 'mc' + mcVersion + '-' + modVersion
group = "chikachi.discord"
archivesBaseName = "DiscordIntegration"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = mcVersion + '-' + forgeVersion

    if (file('../run').exists()) {
        runDir = '../run'
    } else {
        runDir = 'run'
    }

    mappings = "stable_29"
}

def printDebug(message) {
    println '[' + archivesBaseName + '] ' + message
}

/*
 * Copyright (C) 2017 Chikachi
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses.
 */

class CurseForgeDependencyInfo {
    public String module, version, ext
    private String fileid

    CurseForgeDependencyInfo(String module, String version, String ext, String fileid) {
        this.module = module
        this.version = version
        this.ext = ext
        this.fileid = fileid
    }

    String GetFileId() {
        return Integer.parseInt(fileid.substring(0, 4)) + "/" + Integer.parseInt(fileid.substring(4))
    }
}

// Dependencies on CurseForge
List<CurseForgeDependencyInfo> curseForgeDependencies = new ArrayList<CurseForgeDependencyInfo>()

dependencies {
    compile files('./libs/JDA-3.1.0_204-withDependencies.jar')
    //compile 'net.dv8tion:JDA:3.1.0_204:withDependencies'
    compile 'com.vdurmont:emoji-java:3.1.3'

    for (CurseForgeDependencyInfo dependency : curseForgeDependencies) {
        if (file('../' + dependency.module).exists()) {
            printDebug 'Using local ' + dependency.module + ' project'
            compile project(':' + dependency.module)
            continue
        }
        if (file('./' + dependency.module + '.jar').exists()) {
            printDebug 'Using local ' + dependency.module + ' compiled jar'
            compile files('./' + dependency.module + '.jar')
            continue
        }
        compile group: dependency.GetFileId(), name: dependency.module, version: dependency.version, ext: dependency.ext
    }

    compile 'org.jetbrains:annotations:15.0'
}

jar {
    manifest {
        attributes(
                "FMLAT": 'discordintegration_at.cfg'
        )
    }
}

shadowJar {
    classifier = ""
    relocate "com.mashape.unirest", "chikachi.discord.repack.com.mashape.unirest"
    relocate "com.neovisionaries.ws.client", "chikachi.discord.repack.com.neovisionaries.ws.client"
    relocate "com.sun.jna", "chikachi.discord.repack.com.sun.jna"
    relocate "com.vdurmont.emoji", "chikachi.discord.repack.com.vdurmont.emoji"
    relocate "javax.sound", "chikachi.discord.repack.javax.sound"
    relocate "javazoom", "chikachi.discord.repack.javazoom"
    relocate "net.dv8tion.jda", "chikachi.discord.repack.net.dv8tion.jda"
    relocate "net.sourceforge.jaad", "chikachi.discord.repack.net.sourceforge.jaad"
    relocate "org.apache.commons.codec", "chikachi.discord.repack.org.apache.commons.codec"
    relocate "org.apache.commons.lang3", "chikachi.discord.repack.org.apache.commons.lang3"
    relocate "org.json", "chikachi.discord.repack.org.json"
    relocate "org.kc7bfi.jflac", "chikachi.discord.repack.orgkc7bfi.jflac"
    relocate "org.tritonus", "chikachi.discord.repack.org.tritonus"
    relocate "tomp2p.opuswrapper", "chikachi.discord.repack.tomp2p.opuswrapper"

    relocate "org.apache.http", "chikachi.discord.repack.org.apache.http"
    relocate "org.apache.commons.logging", "chikachi.discord.repack.org.apache.commons.logging"

    dependencies {
        include(dependency('net.dv8tion:JDA:3.1.0_204:withDependencies'))
        include(dependency('com.vdurmont:emoji-java:3.1.3'))
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': modVersion, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

reobf { shadowJar { mappingType = "SEARGE" } }
tasks.reobfShadowJar.mustRunAfter shadowJar

idea { module { inheritOutputDirs = true } }